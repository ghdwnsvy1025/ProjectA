#pragma once

// 10.12 토

// 1. 상점 UI에서 데이터 데이블??
// 2. 아이템이란 무엇인가
// -> 큼직큼직한 클래스들을 따로 둔다. ex) Weapon, Portion, Scroll
// -> if AssetManager를 사용한다면 TMap<FName, class,>로 이름을 통해 위의 3가지 클래스를 가져올 수 있다.
// -> 가져오면?? 상점 UI에서 목록들을 표시할 때, BP에서 작업한 UI의 Widget을 Bind하여 데이터를 표시한다.
// -> 이 데이터는 어디서 가져오냐?? 데이터 테이블을 읽어들인다.
// 이 때, 아이템의 이름이 만약 웨폰에 포함되는 아이템이다. 이 웨폰의 정보는 어떻게 불러들이지?
// 웨폰에 매칭되는 GE가 필요하다. GE는 블루프린터에서 작업한다.
// 상점 UI에서 이 웨폰을 호버링 할 때 웨폰의 정보를 나오게 하는 함수를 발동한다.
// 이 함수 안에는 현재 클릭된 웨폰의 이름과 GE 블루프린트의 이름을 비교해서??
// 아니면 웨폰에 상속해서 만든 BP를 가져오는건가?? 결국, BP는 GE들을 가져와야하는데.
// 만약 GE가 한개, 아 결국 아이템 메쉬도 표현해야 하니까 BP로 하는게 맞겠다.
// 그럼 UI클릭 -> 아이템 이름과 매칭되는 BP를 가져옴 -> 그 BP에 해당하는 UI를 띄움??
// UI : 카드에 해당하는 UI클래스를 하나 만든다. 이 클래스에서 데이터 테이블에 있는 내용들을 띄운다 (이미지, 가격, 설명, 이름..)
// 이건 한 클래스에서 가능하다. -> 동적 생성?? 그럼 BP에 해당하는 UI를 띄우는 것은 코드에서 UI를 생성?? CreateWidget or 미리 캐싱해둠
// 그러면 UI 호버링 -> 아이템 이름과 매칭되는 데이터를 가져오고 UI를 만들거나 가져온다. -> 화면에 띄운다.
// 근데 아이템 이름과 매칭되는 데이터를 어떻게 가져옴?? 그냥 편하게 BP를 상속받아서 만들고
// 결국 웨폰 데이타 에셋이 있긴 해야겠다. 이 웨폰 데이터 에셋을 통해 데이터를 가져오고 UI를 만들어서 화면에 띄운다.
// UI만드는 것을 GA로 빼도 괜찮겠다. 아니면 호버링 자체를 GA로 빼도 괜찮을 거 같다.

// 그런데 상점의 데이터가 나중에 변경되면 어떻게 적용하지?? -> UI매니저에서는 상점 클래스를 하나만 가지고 있는다?
// -> 아니면 리소스 매니저??에도 Tag를 통해 데이터를 가져오는데 이 데이터는 수정이 되어있어야 한다?? 그럼 상점 에셋 데이타는?
// -> 데이터 수정이 일어나면 리소스 매니저에 Tag에따른 상점들의 메모리가 있는데, 그 Tag를통해 상점 에셋 데이터의 값을 수정한다?
// -> 값을 수정하는 것은 GE를 통해 해야하긴 하는데, Tag에 따른 에셋 데이타가 있고 뭐 나중에 GE를 통해 에셋 데이타를 조절?
// -> 결국 에셋데이터와 어트리뷰트의 차이점은 뭘까?? -> 에셋 데이터는 아이템, 환경, 레벨 등의 정적인 정보들. \
// 어트리 뷰트는 캐릭터의 능력, 버프, 스탯과 같은 동적인 정보들. 
// 그러면 결국 Tag에 따른 에셋데이터가 있고, GE보다는 그냥 접근해서 수정해야겠다. 이 리소스 변경하는 기능을 GA로 뺄 수 있을까?
// 어쨋든 리소스 매니저에서 Tag에 따른 데이터 에셋을 들고있기 때문에 변경한 것이 저장이 될 수 있다.
// 리소스 매니저에서 아이템 이름에 따른 아이템 데이터 에셋(크게 웨폰, 물약, 스크롤) 이렇게 Type별로 데이터 에셋들을 저장해 놓는다.
// 그러면 상점에서의 아이템 이름을 통해 아이템 타입을 가져와 데이터 에셋들을 가져온다.
// 그리고 UIManger에서 호버링 UI를 Show를 한다.(미리 캐싱되어 있음)
// 이 UI도 위와 마찬가지로 방금 가져온 데이터 에셋을 통해 초기화를 진행해서 UI를 띄운다.
// UI를 초기화해서 띄우는 게 공통된 기능이다.
// 상점 UI는 동적 재구성하는게 맞지만, 상점에 있는 아이템 호버링은 캐싱 방식으로 해도 될 거같다. 아이템은 정보가 바뀌지 않기 때문이다.
// 레벨 전환시 어짜피 필요한 것들만 캐싱 하고 버릴 것이다.

// [마을 상점]

// 타일 UI 도착 -> 마을 UI띄움 -> 상점 버튼 클릭 -> 상점 UI PopUp 호출 + Tag를 넘김
// -> Tag에 따른 상점 UI클래스에서의 데이터 테이블(or 리소스 매니저 Tag를 통해 얻음)을 통해 동적 초기화 and Visibilty True
// -> 상점 UI 띄움 -> 데이터 호버링 -> 아이템 UI 캐싱으로 Show해서 띄움 

// 그럼, 필요한 것 -> 마을 UI + 클래스, 상점 UI + 클래스, 호버링 UI + 클래스, 리소스 매니저, 데이터 테이블, 태그 추가

// 리소스 매니저 -> Tag(상점 종류 ex) UI.Popup.Shop.Gran..  + DataAsset이 아니라 DataTable Struct를 가지고 있는 것이 나을듯.
// 리소스 매니저 : TMap<Tag, FTable> ???

// 리소스 매니저가 아니고, UI에서 이미 값을 들고 있으면 되잖아? -> 서버 동기화시 문제(복사)

// 리소스 매니저 : TMap<Tag, TMap<Name, DataTable>>
// 어디서 막힌거지?? 데이터 테이블 저장을 어떤 형식으로?? Tag : UI.Popup.Shop.Gran -> TMap.Key : 약초, Tmap.Value : DataTable
// UI 데이터
// Tag : UI.Popup.Shop.Alpha -> TMap.Key : 다년초, TMap.Value : DataTable
// Tag : UI.Popup.Hover.다년초 -> TMap.Key : 다년초, Tamp.Value : DataTable

// 아이템 데이터
// DataTable은 크게 Weapon, Portion, Scroll 클래스가 있다.
// 데이터 테이블은 Weapon에 쭉, Portion 쭉, Scroll 쭉 있다.
// 리소스 매니저 : TMap<이름, DataTable>
// DataTable이 부모로 되나?
// 음.. UI가 그냥 들고 있는 걸로 하자. 리소스 매니저는 테이블정보를 전부 가지고 있는다. Load로 외부에서 사용한다?
// 싱글 플레이에서는 가능.
// 음.. 아이템의 정보는 어디서 들고 있어야 하나? 
// 그냥 UI가 들고 있게 하자.

// 리소스 매니저에서는 테이블들을 읽어오고, SHop UI에서?? NoNo, NPC 를 만들자.
// TMap<FName, TMap<FName, UDataTable>> Test;
// ex) A 상점 -> TMap<상점 이름, TMap<Name, UDataTable>>
// Load<GranShop> -> TMap<
// Load<T>(FName) -> TMap<T, TMap<Name, UDataTable>>

// Load<Shop>(Tag) -> TMap<Tag, TMap<FName, UDataTable>>

// 
// [서비스]

















